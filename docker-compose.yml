# docker-compose.yml

version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: csgo_postgres
    environment:
      POSTGRES_DB: csgo_arbitrage
      POSTGRES_USER: csgo_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secretpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csgo_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para caché y cola de mensajes
  redis:
    image: redis:7-alpine
    container_name: csgo_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: csgo_backend
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql://csgo_user:${DB_PASSWORD:-secretpassword}@postgres:5432/csgo_arbitrage
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    command: uvicorn api:app --host 0.0.0.0 --port 8000 --reload

  # Workers de Celery para scrapers
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: csgo_celery_worker
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql://csgo_user:${DB_PASSWORD:-secretpassword}@postgres:5432/csgo_arbitrage
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - ./logs:/app/logs
    command: celery -A tasks worker --loglevel=info --concurrency=4

  # Celery Beat para tareas programadas
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: csgo_celery_beat
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql://csgo_user:${DB_PASSWORD:-secretpassword}@postgres:5432/csgo_arbitrage
      REDIS_URL: redis://redis:6379
    volumes:
      - ./backend:/app
      - ./config:/app/config
    command: celery -A tasks beat --loglevel=info

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: csgo_frontend
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://backend:8000
      REACT_APP_WS_URL: ws://backend:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: npm start

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: csgo_nginx
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"

  # Grafana para monitoreo
  grafana:
    image: grafana/grafana:latest
    container_name: csgo_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: csgo_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"

  # Flower para monitoreo de Celery
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: csgo_flower
    depends_on:
      - redis
    environment:
      CELERY_BROKER_URL: redis://redis:6379
    ports:
      - "5555:5555"
    command: celery -A tasks flower --port=5555

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: csgo_network

# backend/Dockerfile
FROM python:3.11-slim

WORKDIR /app

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copiar requirements
COPY requirements.txt .

# Instalar dependencias de Python
RUN pip install --no-cache-dir -r requirements.txt

# Copiar código
COPY . .

# Exponer puerto
EXPOSE 8000

# Comando por defecto
CMD ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"]

# backend/requirements.txt
fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
redis==5.0.1
celery==5.3.4
aiohttp==3.9.1
beautifulsoup4==4.12.2
selenium==4.15.2
undetected-chromedriver==3.5.4
pandas==2.1.3
numpy==1.26.2
python-telegram-bot==20.6
discord-webhook==1.3.0
email-validator==2.1.0
python-multipart==0.0.6
websockets==12.0
prometheus-client==0.19.0
flower==2.0.1

# frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copiar package.json
COPY package*.json ./

# Instalar dependencias
RUN npm ci

# Copiar código
COPY . .

# Exponer puerto
EXPOSE 3000

# Comando por defecto
CMD ["npm", "start"]

# frontend/package.json
{
  "name": "csgo-arbitrage-frontend",
  "version": "2.0.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/material": "^5.14.18",
    "@mui/icons-material": "^5.14.18",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.19.0",
    "axios": "^1.6.2",
    "recharts": "^2.10.1",
    "socket.io-client": "^4.7.2",
    "react-toastify": "^9.1.3",
    "date-fns": "^2.30.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "devDependencies": {
    "react-scripts": "5.0.1",
    "@types/react": "^18.2.38",
    "@types/react-dom": "^18.2.17"
  }
}

# nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8000;
    }

    upstream frontend {
        server frontend:3000;
    }

    server {
        listen 80;
        server_name localhost;

        # Redirigir todo el tráfico HTTP a HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl;
        server_name localhost;

        # SSL certificates (generar con Let's Encrypt en producción)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        # API Backend
        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

# .env.example
# Base de datos
DB_PASSWORD=your-secure-password

# Seguridad
SECRET_KEY=your-secret-key-here

# Entorno
ENVIRONMENT=production

# Grafana
GRAFANA_USER=admin
GRAFANA_PASSWORD=secure-password

# Telegram Bot
TELEGRAM_BOT_TOKEN=your-bot-token
TELEGRAM_CHAT_ID=your-chat-id

# Discord
DISCORD_WEBHOOK_URL=your-webhook-url

# Email
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password

# API Keys
WAXPEER_API_KEY=your-key
CSDEALS_API_KEY=your-key
EMPIRE_API_KEY=your-key